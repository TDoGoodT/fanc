Grammar

    0 $accept: program $end

    1 program: funcs

    2 funcs: epsilon
    3      | funcDecl funcs

    4 funcDecl: retType id LPAREN formals RPAREN LBRACE statements RBRACE

    5 retType: type
    6        | void

    7 formals: epsilon
    8        | formalsList

    9 formalsList: formalDecl
   10            | formalDecl COMMA formalsList

   11 formalDecl: type id

   12 statements: statement
   13           | statements statement

   14 statement: LBRACE statements RBRACE
   15          | type id SC
   16          | type id ASSIGN exp SC
   17          | id ASSIGN exp SC
   18          | call SC
   19          | RETURN SC
   20          | RETURN exp SC
   21          | if_pattern
   22          | while LPAREN exp RPAREN scoped_statement
   23          | BREAK SC
   24          | CONTINUE SC

   25 if_pattern: if LPAREN exp RPAREN scoped_statement
   26           | if LPAREN exp RPAREN scoped_statement else scoped_statement

   27 call: id LPAREN expList RPAREN
   28     | id LPAREN RPAREN

   29 expList: exp
   30        | exp COMMA expList

   31 type: int
   32     | byte
   33     | bool

   34 exp: LPAREN exp RPAREN
   35    | exp IF LPAREN exp RPAREN ELSE exp
   36    | binop
   37    | id
   38    | call
   39    | number
   40    | number B
   41    | string
   42    | true
   43    | false
   44    | NOT exp
   45    | exp AND exp
   46    | exp OR exp
   47    | exp RELOP exp
   48    | LPAREN type RPAREN exp

   49 binop: exp ADD exp
   50      | exp SUB exp
   51      | exp MULT exp
   52      | exp DIV exp

   53 number: NUM

   54 id: ID

   55 string: STRING

   56 void: VOID

   57 int: _INT_

   58 byte: BYTE

   59 bool: _BOOL_

   60 false: FALSE

   61 true: TRUE

   62 while: WHILE

   63 if: IF

   64 else: ELSE

   65 $@1: %empty

   66 scoped_statement: $@1 statement

   67 epsilon: %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    OR (258) 46
    AND (259) 45
    RELOP (260) 47
    ADD (261) 49
    SUB (262) 50
    MULT (263) 51
    DIV (264) 52
    NOT (265) 44
    RPAREN (266) 4 22 25 26 27 28 34 35 48
    LPAREN (267) 4 22 25 26 27 28 34 35 48
    LBRACE (268) 4 14
    RBRACE (269) 4 14
    ASSIGN (270) 16 17
    IF (271) 35 63
    ELSE (272) 35 64
    RETURN (273) 19 20
    WHILE (274) 62
    BREAK (275) 23
    CONTINUE (276) 24
    SC (277) 15 16 17 18 19 20 23 24
    COMMA (278) 10 30
    B (279) 40
    NUM (280) 53
    ID (281) 54
    STRING (282) 55
    VOID (283) 56
    _INT_ (284) 57
    BYTE (285) 58
    _BOOL_ (286) 59
    FALSE (287) 60
    TRUE (288) 61


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    program <T_Program> (35)
        on left: 1
        on right: 0
    funcs <T_Funcs> (36)
        on left: 2 3
        on right: 1 3
    funcDecl <T_FuncDecl> (37)
        on left: 4
        on right: 3
    retType <T_RetType> (38)
        on left: 5 6
        on right: 4
    formals <T_Formals> (39)
        on left: 7 8
        on right: 4
    formalsList <T_FormalsList> (40)
        on left: 9 10
        on right: 8 10
    formalDecl <T_FormalDecl> (41)
        on left: 11
        on right: 9 10
    statements <T_Statements> (42)
        on left: 12 13
        on right: 4 13 14
    statement <T_Statement> (43)
        on left: 14 15 16 17 18 19 20 21 22 23 24
        on right: 12 13 66
    if_pattern <T_Statement> (44)
        on left: 25 26
        on right: 21
    call <T_CallExp> (45)
        on left: 27 28
        on right: 18 38
    expList <T_ExpList> (46)
        on left: 29 30
        on right: 27 30
    type <T_Type> (47)
        on left: 31 32 33
        on right: 5 11 15 16 48
    exp <T_Exp> (48)
        on left: 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
        on right: 16 17 20 22 25 26 29 30 34 35 44 45 46 47 48 49 50 51 52
    binop <T_Binop> (49)
        on left: 49 50 51 52
        on right: 36
    number <T_Number> (50)
        on left: 53
        on right: 39 40
    id <T_Id> (51)
        on left: 54
        on right: 4 11 15 16 17 27 28 37
    string <T_String> (52)
        on left: 55
        on right: 41
    void <T_Type> (53)
        on left: 56
        on right: 6
    int <T_Type> (54)
        on left: 57
        on right: 31
    byte <T_Type> (55)
        on left: 58
        on right: 32
    bool <T_Type> (56)
        on left: 59
        on right: 33
    false <T_Bool> (57)
        on left: 60
        on right: 43
    true <T_Bool> (58)
        on left: 61
        on right: 42
    while (59)
        on left: 62
        on right: 22
    if (60)
        on left: 63
        on right: 25 26
    else (61)
        on left: 64
        on right: 26
    scoped_statement <T_Statement> (62)
        on left: 66
        on right: 22 25 26
    $@1 (63)
        on left: 65
        on right: 66
    epsilon (64)
        on left: 67
        on right: 2 7


State 0

    0 $accept: . program $end

    VOID  shift, and go to state 1
    _INT_   shift, and go to state 2
    BYTE  shift, and go to state 3
    _BOOL_  shift, and go to state 4

    $default  reduce using rule 67 (epsilon)

    program   go to state 5
    funcs     go to state 6
    funcDecl  go to state 7
    retType   go to state 8
    type      go to state 9
    void      go to state 10
    int       go to state 11
    byte      go to state 12
    bool      go to state 13
    epsilon   go to state 14


State 1

   56 void: VOID .

    $default  reduce using rule 56 (void)


State 2

   57 int: _INT_ .

    $default  reduce using rule 57 (int)


State 3

   58 byte: BYTE .

    $default  reduce using rule 58 (byte)


State 4

   59 bool: _BOOL_ .

    $default  reduce using rule 59 (bool)


State 5

    0 $accept: program . $end

    $end  shift, and go to state 15


State 6

    1 program: funcs .

    $default  reduce using rule 1 (program)


State 7

    3 funcs: funcDecl . funcs

    VOID  shift, and go to state 1
    _INT_   shift, and go to state 2
    BYTE  shift, and go to state 3
    _BOOL_  shift, and go to state 4

    $default  reduce using rule 67 (epsilon)

    funcs     go to state 16
    funcDecl  go to state 7
    retType   go to state 8
    type      go to state 9
    void      go to state 10
    int       go to state 11
    byte      go to state 12
    bool      go to state 13
    epsilon   go to state 14


State 8

    4 funcDecl: retType . id LPAREN formals RPAREN LBRACE statements RBRACE

    ID  shift, and go to state 17

    id  go to state 18


State 9

    5 retType: type .

    $default  reduce using rule 5 (retType)


State 10

    6 retType: void .

    $default  reduce using rule 6 (retType)


State 11

   31 type: int .

    $default  reduce using rule 31 (type)


State 12

   32 type: byte .

    $default  reduce using rule 32 (type)


State 13

   33 type: bool .

    $default  reduce using rule 33 (type)


State 14

    2 funcs: epsilon .

    $default  reduce using rule 2 (funcs)


State 15

    0 $accept: program $end .

    $default  accept


State 16

    3 funcs: funcDecl funcs .

    $default  reduce using rule 3 (funcs)


State 17

   54 id: ID .

    $default  reduce using rule 54 (id)


State 18

    4 funcDecl: retType id . LPAREN formals RPAREN LBRACE statements RBRACE

    LPAREN  shift, and go to state 19


State 19

    4 funcDecl: retType id LPAREN . formals RPAREN LBRACE statements RBRACE

    _INT_   shift, and go to state 2
    BYTE  shift, and go to state 3
    _BOOL_  shift, and go to state 4

    $default  reduce using rule 67 (epsilon)

    formals      go to state 20
    formalsList  go to state 21
    formalDecl   go to state 22
    type         go to state 23
    int          go to state 11
    byte         go to state 12
    bool         go to state 13
    epsilon      go to state 24


State 20

    4 funcDecl: retType id LPAREN formals . RPAREN LBRACE statements RBRACE

    RPAREN  shift, and go to state 25


State 21

    8 formals: formalsList .

    $default  reduce using rule 8 (formals)


State 22

    9 formalsList: formalDecl .
   10            | formalDecl . COMMA formalsList

    COMMA  shift, and go to state 26

    $default  reduce using rule 9 (formalsList)


State 23

   11 formalDecl: type . id

    ID  shift, and go to state 17

    id  go to state 27


State 24

    7 formals: epsilon .

    $default  reduce using rule 7 (formals)


State 25

    4 funcDecl: retType id LPAREN formals RPAREN . LBRACE statements RBRACE

    LBRACE  shift, and go to state 28


State 26

   10 formalsList: formalDecl COMMA . formalsList

    _INT_   shift, and go to state 2
    BYTE  shift, and go to state 3
    _BOOL_  shift, and go to state 4

    formalsList  go to state 29
    formalDecl   go to state 22
    type         go to state 23
    int          go to state 11
    byte         go to state 12
    bool         go to state 13


State 27

   11 formalDecl: type id .

    $default  reduce using rule 11 (formalDecl)


State 28

    4 funcDecl: retType id LPAREN formals RPAREN LBRACE . statements RBRACE

    LBRACE    shift, and go to state 30
    IF        shift, and go to state 31
    RETURN    shift, and go to state 32
    WHILE     shift, and go to state 33
    BREAK     shift, and go to state 34
    CONTINUE  shift, and go to state 35
    ID        shift, and go to state 17
    _INT_       shift, and go to state 2
    BYTE      shift, and go to state 3
    _BOOL_      shift, and go to state 4

    statements  go to state 36
    statement   go to state 37
    if_pattern  go to state 38
    call        go to state 39
    type        go to state 40
    id          go to state 41
    int         go to state 11
    byte        go to state 12
    bool        go to state 13
    while       go to state 42
    if          go to state 43


State 29

   10 formalsList: formalDecl COMMA formalsList .

    $default  reduce using rule 10 (formalsList)


State 30

   14 statement: LBRACE . statements RBRACE

    LBRACE    shift, and go to state 30
    IF        shift, and go to state 31
    RETURN    shift, and go to state 32
    WHILE     shift, and go to state 33
    BREAK     shift, and go to state 34
    CONTINUE  shift, and go to state 35
    ID        shift, and go to state 17
    _INT_       shift, and go to state 2
    BYTE      shift, and go to state 3
    _BOOL_      shift, and go to state 4

    statements  go to state 44
    statement   go to state 37
    if_pattern  go to state 38
    call        go to state 39
    type        go to state 40
    id          go to state 41
    int         go to state 11
    byte        go to state 12
    bool        go to state 13
    while       go to state 42
    if          go to state 43


State 31

   63 if: IF .

    $default  reduce using rule 63 (if)


State 32

   19 statement: RETURN . SC
   20          | RETURN . exp SC

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    SC      shift, and go to state 47
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 53
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 33

   62 while: WHILE .

    $default  reduce using rule 62 (while)


State 34

   23 statement: BREAK . SC

    SC  shift, and go to state 60


State 35

   24 statement: CONTINUE . SC

    SC  shift, and go to state 61


State 36

    4 funcDecl: retType id LPAREN formals RPAREN LBRACE statements . RBRACE
   13 statements: statements . statement

    LBRACE    shift, and go to state 30
    RBRACE    shift, and go to state 62
    IF        shift, and go to state 31
    RETURN    shift, and go to state 32
    WHILE     shift, and go to state 33
    BREAK     shift, and go to state 34
    CONTINUE  shift, and go to state 35
    ID        shift, and go to state 17
    _INT_       shift, and go to state 2
    BYTE      shift, and go to state 3
    _BOOL_      shift, and go to state 4

    statement   go to state 63
    if_pattern  go to state 38
    call        go to state 39
    type        go to state 40
    id          go to state 41
    int         go to state 11
    byte        go to state 12
    bool        go to state 13
    while       go to state 42
    if          go to state 43


State 37

   12 statements: statement .

    $default  reduce using rule 12 (statements)


State 38

   21 statement: if_pattern .

    $default  reduce using rule 21 (statement)


State 39

   18 statement: call . SC

    SC  shift, and go to state 64


State 40

   15 statement: type . id SC
   16          | type . id ASSIGN exp SC

    ID  shift, and go to state 17

    id  go to state 65


State 41

   17 statement: id . ASSIGN exp SC
   27 call: id . LPAREN expList RPAREN
   28     | id . LPAREN RPAREN

    LPAREN  shift, and go to state 66
    ASSIGN  shift, and go to state 67


State 42

   22 statement: while . LPAREN exp RPAREN scoped_statement

    LPAREN  shift, and go to state 68


State 43

   25 if_pattern: if . LPAREN exp RPAREN scoped_statement
   26           | if . LPAREN exp RPAREN scoped_statement else scoped_statement

    LPAREN  shift, and go to state 69


State 44

   13 statements: statements . statement
   14 statement: LBRACE statements . RBRACE

    LBRACE    shift, and go to state 30
    RBRACE    shift, and go to state 70
    IF        shift, and go to state 31
    RETURN    shift, and go to state 32
    WHILE     shift, and go to state 33
    BREAK     shift, and go to state 34
    CONTINUE  shift, and go to state 35
    ID        shift, and go to state 17
    _INT_       shift, and go to state 2
    BYTE      shift, and go to state 3
    _BOOL_      shift, and go to state 4

    statement   go to state 63
    if_pattern  go to state 38
    call        go to state 39
    type        go to state 40
    id          go to state 41
    int         go to state 11
    byte        go to state 12
    bool        go to state 13
    while       go to state 42
    if          go to state 43


State 45

   44 exp: NOT . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 71
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 46

   34 exp: LPAREN . exp RPAREN
   48    | LPAREN . type RPAREN exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    _INT_     shift, and go to state 2
    BYTE    shift, and go to state 3
    _BOOL_    shift, and go to state 4
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    type    go to state 72
    exp     go to state 73
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    int     go to state 11
    byte    go to state 12
    bool    go to state 13
    false   go to state 58
    true    go to state 59


State 47

   19 statement: RETURN SC .

    $default  reduce using rule 19 (statement)


State 48

   53 number: NUM .

    $default  reduce using rule 53 (number)


State 49

   55 string: STRING .

    $default  reduce using rule 55 (string)


State 50

   60 false: FALSE .

    $default  reduce using rule 60 (false)


State 51

   61 true: TRUE .

    $default  reduce using rule 61 (true)


State 52

   38 exp: call .

    $default  reduce using rule 38 (exp)


State 53

   20 statement: RETURN exp . SC
   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    OR     shift, and go to state 74
    AND    shift, and go to state 75
    RELOP  shift, and go to state 76
    ADD    shift, and go to state 77
    SUB    shift, and go to state 78
    MULT   shift, and go to state 79
    DIV    shift, and go to state 80
    IF     shift, and go to state 81
    SC     shift, and go to state 82


State 54

   36 exp: binop .

    $default  reduce using rule 36 (exp)


State 55

   39 exp: number .
   40    | number . B

    B  shift, and go to state 83

    $default  reduce using rule 39 (exp)


State 56

   27 call: id . LPAREN expList RPAREN
   28     | id . LPAREN RPAREN
   37 exp: id .

    LPAREN  shift, and go to state 66

    $default  reduce using rule 37 (exp)


State 57

   41 exp: string .

    $default  reduce using rule 41 (exp)


State 58

   43 exp: false .

    $default  reduce using rule 43 (exp)


State 59

   42 exp: true .

    $default  reduce using rule 42 (exp)


State 60

   23 statement: BREAK SC .

    $default  reduce using rule 23 (statement)


State 61

   24 statement: CONTINUE SC .

    $default  reduce using rule 24 (statement)


State 62

    4 funcDecl: retType id LPAREN formals RPAREN LBRACE statements RBRACE .

    $default  reduce using rule 4 (funcDecl)


State 63

   13 statements: statements statement .

    $default  reduce using rule 13 (statements)


State 64

   18 statement: call SC .

    $default  reduce using rule 18 (statement)


State 65

   15 statement: type id . SC
   16          | type id . ASSIGN exp SC

    ASSIGN  shift, and go to state 84
    SC      shift, and go to state 85


State 66

   27 call: id LPAREN . expList RPAREN
   28     | id LPAREN . RPAREN

    NOT     shift, and go to state 45
    RPAREN  shift, and go to state 86
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call     go to state 52
    expList  go to state 87
    exp      go to state 88
    binop    go to state 54
    number   go to state 55
    id       go to state 56
    string   go to state 57
    false    go to state 58
    true     go to state 59


State 67

   17 statement: id ASSIGN . exp SC

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 89
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 68

   22 statement: while LPAREN . exp RPAREN scoped_statement

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 90
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 69

   25 if_pattern: if LPAREN . exp RPAREN scoped_statement
   26           | if LPAREN . exp RPAREN scoped_statement else scoped_statement

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 91
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 70

   14 statement: LBRACE statements RBRACE .

    $default  reduce using rule 14 (statement)


State 71

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   44    | NOT exp .
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    IF  shift, and go to state 81

    $default  reduce using rule 44 (exp)


State 72

   48 exp: LPAREN type . RPAREN exp

    RPAREN  shift, and go to state 92


State 73

   34 exp: LPAREN exp . RPAREN
   35    | exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    OR      shift, and go to state 74
    AND     shift, and go to state 75
    RELOP   shift, and go to state 76
    ADD     shift, and go to state 77
    SUB     shift, and go to state 78
    MULT    shift, and go to state 79
    DIV     shift, and go to state 80
    RPAREN  shift, and go to state 93
    IF      shift, and go to state 81


State 74

   46 exp: exp OR . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 94
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 75

   45 exp: exp AND . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 95
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 76

   47 exp: exp RELOP . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 96
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 77

   49 binop: exp ADD . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 97
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 78

   50 binop: exp SUB . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 98
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 79

   51 binop: exp MULT . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 99
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 80

   52 binop: exp DIV . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 100
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 81

   35 exp: exp IF . LPAREN exp RPAREN ELSE exp

    LPAREN  shift, and go to state 101


State 82

   20 statement: RETURN exp SC .

    $default  reduce using rule 20 (statement)


State 83

   40 exp: number B .

    $default  reduce using rule 40 (exp)


State 84

   16 statement: type id ASSIGN . exp SC

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 102
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 85

   15 statement: type id SC .

    $default  reduce using rule 15 (statement)


State 86

   28 call: id LPAREN RPAREN .

    $default  reduce using rule 28 (call)


State 87

   27 call: id LPAREN expList . RPAREN

    RPAREN  shift, and go to state 103


State 88

   29 expList: exp .
   30        | exp . COMMA expList
   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    OR     shift, and go to state 74
    AND    shift, and go to state 75
    RELOP  shift, and go to state 76
    ADD    shift, and go to state 77
    SUB    shift, and go to state 78
    MULT   shift, and go to state 79
    DIV    shift, and go to state 80
    IF     shift, and go to state 81
    COMMA  shift, and go to state 104

    $default  reduce using rule 29 (expList)


State 89

   17 statement: id ASSIGN exp . SC
   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    OR     shift, and go to state 74
    AND    shift, and go to state 75
    RELOP  shift, and go to state 76
    ADD    shift, and go to state 77
    SUB    shift, and go to state 78
    MULT   shift, and go to state 79
    DIV    shift, and go to state 80
    IF     shift, and go to state 81
    SC     shift, and go to state 105


State 90

   22 statement: while LPAREN exp . RPAREN scoped_statement
   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    OR      shift, and go to state 74
    AND     shift, and go to state 75
    RELOP   shift, and go to state 76
    ADD     shift, and go to state 77
    SUB     shift, and go to state 78
    MULT    shift, and go to state 79
    DIV     shift, and go to state 80
    RPAREN  shift, and go to state 106
    IF      shift, and go to state 81


State 91

   25 if_pattern: if LPAREN exp . RPAREN scoped_statement
   26           | if LPAREN exp . RPAREN scoped_statement else scoped_statement
   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    OR      shift, and go to state 74
    AND     shift, and go to state 75
    RELOP   shift, and go to state 76
    ADD     shift, and go to state 77
    SUB     shift, and go to state 78
    MULT    shift, and go to state 79
    DIV     shift, and go to state 80
    RPAREN  shift, and go to state 107
    IF      shift, and go to state 81


State 92

   48 exp: LPAREN type RPAREN . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 108
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 93

   34 exp: LPAREN exp RPAREN .

    $default  reduce using rule 34 (exp)


State 94

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   46    | exp OR exp .
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    AND    shift, and go to state 75
    RELOP  shift, and go to state 76
    ADD    shift, and go to state 77
    SUB    shift, and go to state 78
    MULT   shift, and go to state 79
    DIV    shift, and go to state 80
    IF     shift, and go to state 81

    $default  reduce using rule 46 (exp)


State 95

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   45    | exp AND exp .
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    RELOP  shift, and go to state 76
    ADD    shift, and go to state 77
    SUB    shift, and go to state 78
    MULT   shift, and go to state 79
    DIV    shift, and go to state 80
    IF     shift, and go to state 81

    $default  reduce using rule 45 (exp)


State 96

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   47    | exp RELOP exp .
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    ADD   shift, and go to state 77
    SUB   shift, and go to state 78
    MULT  shift, and go to state 79
    DIV   shift, and go to state 80
    IF    shift, and go to state 81

    $default  reduce using rule 47 (exp)


State 97

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   49      | exp ADD exp .
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    SUB   shift, and go to state 78
    MULT  shift, and go to state 79
    DIV   shift, and go to state 80
    IF    shift, and go to state 81

    $default  reduce using rule 49 (binop)


State 98

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   50      | exp SUB exp .
   51      | exp . MULT exp
   52      | exp . DIV exp

    MULT  shift, and go to state 79
    DIV   shift, and go to state 80
    IF    shift, and go to state 81

    $default  reduce using rule 50 (binop)


State 99

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   51      | exp MULT exp .
   52      | exp . DIV exp

    DIV  shift, and go to state 80
    IF   shift, and go to state 81

    $default  reduce using rule 51 (binop)


State 100

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp
   52      | exp DIV exp .

    IF  shift, and go to state 81

    $default  reduce using rule 52 (binop)


State 101

   35 exp: exp IF LPAREN . exp RPAREN ELSE exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 109
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 102

   16 statement: type id ASSIGN exp . SC
   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    OR     shift, and go to state 74
    AND    shift, and go to state 75
    RELOP  shift, and go to state 76
    ADD    shift, and go to state 77
    SUB    shift, and go to state 78
    MULT   shift, and go to state 79
    DIV    shift, and go to state 80
    IF     shift, and go to state 81
    SC     shift, and go to state 110


State 103

   27 call: id LPAREN expList RPAREN .

    $default  reduce using rule 27 (call)


State 104

   30 expList: exp COMMA . expList

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call     go to state 52
    expList  go to state 111
    exp      go to state 88
    binop    go to state 54
    number   go to state 55
    id       go to state 56
    string   go to state 57
    false    go to state 58
    true     go to state 59


State 105

   17 statement: id ASSIGN exp SC .

    $default  reduce using rule 17 (statement)


State 106

   22 statement: while LPAREN exp RPAREN . scoped_statement

    $default  reduce using rule 65 ($@1)

    scoped_statement  go to state 112
    $@1               go to state 113


State 107

   25 if_pattern: if LPAREN exp RPAREN . scoped_statement
   26           | if LPAREN exp RPAREN . scoped_statement else scoped_statement

    $default  reduce using rule 65 ($@1)

    scoped_statement  go to state 114
    $@1               go to state 113


State 108

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   48    | LPAREN type RPAREN exp .
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    IF  shift, and go to state 81

    $default  reduce using rule 48 (exp)


State 109

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   35    | exp IF LPAREN exp . RPAREN ELSE exp
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    OR      shift, and go to state 74
    AND     shift, and go to state 75
    RELOP   shift, and go to state 76
    ADD     shift, and go to state 77
    SUB     shift, and go to state 78
    MULT    shift, and go to state 79
    DIV     shift, and go to state 80
    RPAREN  shift, and go to state 115
    IF      shift, and go to state 81


State 110

   16 statement: type id ASSIGN exp SC .

    $default  reduce using rule 16 (statement)


State 111

   30 expList: exp COMMA expList .

    $default  reduce using rule 30 (expList)


State 112

   22 statement: while LPAREN exp RPAREN scoped_statement .

    $default  reduce using rule 22 (statement)


State 113

   66 scoped_statement: $@1 . statement

    LBRACE    shift, and go to state 30
    IF        shift, and go to state 31
    RETURN    shift, and go to state 32
    WHILE     shift, and go to state 33
    BREAK     shift, and go to state 34
    CONTINUE  shift, and go to state 35
    ID        shift, and go to state 17
    _INT_       shift, and go to state 2
    BYTE      shift, and go to state 3
    _BOOL_      shift, and go to state 4

    statement   go to state 116
    if_pattern  go to state 38
    call        go to state 39
    type        go to state 40
    id          go to state 41
    int         go to state 11
    byte        go to state 12
    bool        go to state 13
    while       go to state 42
    if          go to state 43


State 114

   25 if_pattern: if LPAREN exp RPAREN scoped_statement .
   26           | if LPAREN exp RPAREN scoped_statement . else scoped_statement

    ELSE  shift, and go to state 117

    $default  reduce using rule 25 (if_pattern)

    else  go to state 118


State 115

   35 exp: exp IF LPAREN exp RPAREN . ELSE exp

    ELSE  shift, and go to state 119


State 116

   66 scoped_statement: $@1 statement .

    $default  reduce using rule 66 (scoped_statement)


State 117

   64 else: ELSE .

    $default  reduce using rule 64 (else)


State 118

   26 if_pattern: if LPAREN exp RPAREN scoped_statement else . scoped_statement

    $default  reduce using rule 65 ($@1)

    scoped_statement  go to state 120
    $@1               go to state 113


State 119

   35 exp: exp IF LPAREN exp RPAREN ELSE . exp

    NOT     shift, and go to state 45
    LPAREN  shift, and go to state 46
    NUM     shift, and go to state 48
    ID      shift, and go to state 17
    STRING  shift, and go to state 49
    FALSE   shift, and go to state 50
    TRUE    shift, and go to state 51

    call    go to state 52
    exp     go to state 121
    binop   go to state 54
    number  go to state 55
    id      go to state 56
    string  go to state 57
    false   go to state 58
    true    go to state 59


State 120

   26 if_pattern: if LPAREN exp RPAREN scoped_statement else scoped_statement .

    $default  reduce using rule 26 (if_pattern)


State 121

   35 exp: exp . IF LPAREN exp RPAREN ELSE exp
   35    | exp IF LPAREN exp RPAREN ELSE exp .
   45    | exp . AND exp
   46    | exp . OR exp
   47    | exp . RELOP exp
   49 binop: exp . ADD exp
   50      | exp . SUB exp
   51      | exp . MULT exp
   52      | exp . DIV exp

    $default  reduce using rule 35 (exp)
